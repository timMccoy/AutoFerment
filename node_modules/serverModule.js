var http = require('http');
var fs = require('fs');

var os = require('os');

var sensorsMod = require('./sensorsModule');
var scheduleMod = require('./scheduleModule');

var portNum = 9000;
var serverName = "localhost";

var ifaces = os.networkInterfaces();

Object.keys(ifaces).forEach(function (ifname) {
  var alias = 0;

  ifaces[ifname].forEach(function (iface) {
    if ('IPv4' !== iface.family || iface.internal !== false) {
      // skip over internal (i.e. 127.0.0.1) and non-ipv4 addresses
      return;
    }

    if (alias >= 1) {
      // this single interface has multiple ipv4 addresses
      console.log(ifname + ':' + alias, iface.address);
    } else {
      // this interface has only one ipv4 adress
	  //serverName = iface.address;
      console.log(ifname, iface.address);
    }
    ++alias;
  });
});

function onRequest(request, response)
{
	//keep getSensorData at the top because it happens a lot
	if(request.method == 'GET' && request.url == '/getSensorData')
	{
		var data = sensorsMod.getData();
		response.writeHead(200, {"Content-Type" : "application/json" });
		response.end(JSON.stringify(data), "\n");
	}
	
	else if(request.method == 'GET' && request.url == '/getSavedSchedules')
	{
		var data = scheduleMod.getSavedSchedules();
		response.writeHead(200, {"Content-Type" : "application/json" });
		response.end(JSON.stringify(data), "\n");
	}
	
	else if(request.method == 'POST' && request.url == '/getSchedule')
	{
		var requestId = '';
		var schedule = {};
		request.on('data', function (data)
		{
			requestId = data;
		});
		request.on('end', function ()
		{
			schedule = scheduleMod.getSchedule(requestId);
			response.writeHead(200, {"Content-Type" : "application/json" });
			response.end(JSON.stringify(schedule), "\n");
		});
	}

	else if(request.method == 'POST' && request.url == '/setPowerState')
	{
		var dataString = '';
		var newState = {};
		request.on('data', function (data)
		{
			dataString += data;
		});
		request.on('end', function ()
		{

			newState.state = sensorsMod.setPowerState(dataString);
			//console.log("server, state = " + JSON.stringify(newState));
		});
		response.writeHead(200, {"Content-Type" : "application/json" });
		response.end(JSON.stringify(newState), "\n");
	}

	else if(request.method == 'POST' && request.url == '/setSensorState')
	{
		var dataString = '';
		var newState = {};
		request.on('data', function (data)
		{
			dataString += data;
		});
		request.on('end', function ()
		{
			newState = sensorsMod.setSensorState(JSON.parse(dataString));
		});
		response.writeHead(200, {"Content-Type" : "application/json" });
		response.end(JSON.stringify(newState), "\n");
	}

	else if(request.method == 'GET' && request.url == '/getSensorsState')
	{
		var data = sensorsMod.getSensorsState();
		//console.log(data);
		response.writeHead(200, {"Content-Type" : "application/json" });
		response.end(JSON.stringify(data), "\n");
	}

	else if(request.method == 'GET' && request.url == '/fonts/glyphicons-halflings-regular.woff2')
	{
		response.writeHead(200, {"Context-Type": "text/html"});
		fs.createReadStream("../bootstrap/fonts/glyphicons-halflings-regular.woff2").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/fonts/glyphicons-halflings-regular.woff')
	{
		response.writeHead(200, {"Context-Type": "text/html"});
		fs.createReadStream("../bootstrap/fonts/glyphicons-halflings-regular.woff").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/fonts/glyphicons-halflings-regular.ttf')
	{
		response.writeHead(200, {"Context-Type": "text/html"});
		fs.createReadStream("../bootstrap/fonts/glyphicons-halflings-regular.ttf").pipe(response);
	}

	else if(request.method == 'GET' && request.url == '/fonts/fontawesome-webfont.woff')
	{
		response.writeHead(200, {"Context-Type": "text/html"});
		fs.createReadStream("../fonts/fontawesome-webfont.woff").pipe(response);
	}

	else if(request.method == 'GET' && request.url == '/fonts/fontawesome-webfont.eot')
	{
		response.writeHead(200, {"Context-Type": "text/html"});
		fs.createReadStream("../fonts/fontawesome-webfont.eot").pipe(response);
	}

	else if(request.method == 'GET' && request.url == '/fonts/fontawesome-webfont.ttf')
	{
		response.writeHead(200, {"Context-Type": "text/html"});
		fs.createReadStream("../fonts/fontawesome-webfont.ttf").pipe(response);
	}

	else if(request.method == 'GET' && request.url == '/fonts/digital-7/digital-7.ttf')
	{
		response.writeHead(200, {"Context-Type": "text/html"});
		fs.createReadStream("../fonts/digital-7/digital-7.ttf").pipe(response);
	}


	//html file includes last
	else if(request.method == 'GET' && request.url == '/AutoFerment')
	{
		response.writeHead(200, {"Context-Type": "text/html"});
		fs.createReadStream("../html/index.html").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/jqueryJs')
	{
		response.writeHead(200, {"Context-Type": "text/js"});
		fs.createReadStream("../javascript/jquery/jquery-2.2.1.js").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/bootstrapCss')
	{
		response.writeHead(200, {"Context-Type": "text/css"});
		fs.createReadStream("../bootstrap/css/bootstrap.min.css").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/styleCss')
	{
		response.writeHead(200, {"Context-Type": "text/css"});
		fs.createReadStream("../css/style.css").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/jqwidgetsCss')
	{
		response.writeHead(200, {"Context-Type": "text/css"});
		fs.createReadStream("../jqwidgets/jqwidgets/styles/jqx.base.css").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/bootstrap-switchCss')
	{
		response.writeHead(200, {"Context-Type": "text/css"});
		fs.createReadStream("../bootstrap-switch/dist/css/bootstrap3/bootstrap-switch.min.css").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/jquery-uiCss')
	{
		response.writeHead(200, {"Context-Type": "text/css"});
		fs.createReadStream("../jquery-ui/jquery-ui.min.css").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/jquery-uiJs')
	{
		response.writeHead(200, {"Context-Type": "text/js"});
		fs.createReadStream("../jquery-ui/jquery-ui.min.js").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/bootstrapJs')
	{
		response.writeHead(200, {"Context-Type": "text/js"});
		fs.createReadStream("../bootstrap/js/bootstrap.min.js").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/bootstrap-sliderJs')
	{
		response.writeHead(200, {"Context-Type": "text/js"});
		fs.createReadStream("../bootstrap-slider/dist/bootstrap-slider.min.js").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/bootstrap-switchJs')
	{
		response.writeHead(200, {"Context-Type": "text/js"});
		fs.createReadStream("../bootstrap-switch/dist/js/bootstrap-switch.min.js").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/bootstrap-sliderCss')
	{
		response.writeHead(200, {"Context-Type": "text/css"});
		fs.createReadStream("../bootstrap-slider/dist/css/bootstrap-slider.min.css").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/bootstrap-sliderModernizrJs')
	{
		response.writeHead(200, {"Context-Type": "text/js"});
		fs.createReadStream("../bootstrap-slider/dependencies/js/modernizr.js").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/bootstrap-clockPickerCss')
	{
		response.writeHead(200, {"Context-Type": "text/css"});
		fs.createReadStream("../bootstrap-clockPicker/dist/bootstrap-clockpicker.min.css").pipe(response);
	}




	else if(request.method == 'GET' && request.url == '/digitalNumbersCss')
	{
		response.writeHead(200, {"Context-Type": "text/css"});
		fs.createReadStream("../digitalnumbers-master/css/digitalnumbers.css").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/digitalNumbersJs')
	{
		response.writeHead(200, {"Context-Type": "text/js"});
		fs.createReadStream("../digitalnumbers-master/js/digitalnumbers.min.js").pipe(response);
	}




	else if(request.method == 'GET' && request.url == '/bootstrap-clockPickerJs')
	{
		response.writeHead(200, {"Context-Type": "text/js"});
		fs.createReadStream("../bootstrap-clockPicker/dist/bootstrap-clockpicker.min.js").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/ChartJs')
	{
		response.writeHead(200, {"Context-Type": "text/js"});
		fs.createReadStream("../ChartJs/Chart.js").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/navBarControlJs')
	{
		response.writeHead(200, {"Context-Type": "text/js"});
		fs.createReadStream("../javascript/navBarControl.js").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/realtimePanelJs')
	{
		response.writeHead(200, {"Context-Type": "text/js"});
		fs.createReadStream("../javascript/realtimePanel.js").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/snapshotPanelJs')
	{
		response.writeHead(200, {"Context-Type": "text/js"});
		fs.createReadStream("../javascript/snapshotPanel.js").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/schedulerPanelJs')
	{
		response.writeHead(200, {"Context-Type": "text/js"});
		fs.createReadStream("../javascript/schedulerPanel.js").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/controlPanelJs')
	{
		response.writeHead(200, {"Context-Type": "text/js"});
		fs.createReadStream("../javascript/controlPanel.js").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/monitorPanelJs')
	{
		response.writeHead(200, {"Context-Type": "text/js"});
		fs.createReadStream("../javascript/monitorPanel.js").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/jqxcoreJs')
	{
		response.writeHead(200, {"Context-Type": "text/js"});
		fs.createReadStream("../jqwidgets/jqwidgets/jqxcore.js").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/jqxdrawJs')
	{
		response.writeHead(200, {"Context-Type": "text/js"});
		fs.createReadStream("../jqwidgets/jqwidgets/jqxdraw.js").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/jqxgaugeJs')
	{
		response.writeHead(200, {"Context-Type": "text/js"});
		fs.createReadStream("../jqwidgets/jqwidgets/jqxgauge.js").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/images/ui-icons_ffffff_256x240.png')
	{
		response.writeHead(200, {"Context-Type": "image/png"});
		fs.createReadStream("../jquery-ui/images/ui-icons_ffffff_256x240.png").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/images/ui-icons_777777_256x240.png')
	{
		response.writeHead(200, {"Context-Type": "image/png"});
		fs.createReadStream("../jquery-ui/images/ui-icons_777777_256x240.png").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/images/ui-icons_555555_256x240.png')
	{
		response.writeHead(200, {"Context-Type": "image/png"});
		fs.createReadStream("../jquery-ui/images/ui-icons_555555_256x240.png").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/images/ui-icons_444444_256x240.png')
	{
		response.writeHead(200, {"Context-Type": "image/png"});
		fs.createReadStream("../jquery-ui/images/ui-icons_444444_256x240.png").pipe(response);
	}
	else if(request.method == 'GET' && request.url == '/sensorsModule')
	{
		response.writeHead(200, {"Context-Type": "text/js"});
		fs.createReadStream("../node_modules/sensorsModule.js").pipe(response);
	}
	else
	{
		send404Response(response);
	}
}
http.createServer(onRequest).listen(portNum, serverName);

//http.createServer(onRequest).listen(portNum);


console.log("Server Is Running: " + portNum + ":" + serverName);

//start sensor heartbeat here!!!!!
//setInterval(sensorsMod.heartBeat, 1000);

function send404Response(response)
{
	response.writeHead(404, {"Context-Type": "text/plain"});
	response.write("Error 404: Page not found!");
	response.end();
}
