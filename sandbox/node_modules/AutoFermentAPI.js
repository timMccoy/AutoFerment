//AutoFerment Core API Server
var http = require('http');
var fs = require('fs');
var os = require('os');
var ifaces = os.networkInterfaces();
var TempController = require('./TempController');
var portNum = 9001;
var serverName = "localhost";
var POST = 'POST';
var GET = 'GET';

var sensorControllerId = "TestSensor";
var sensorAddress = "0x000000";
var fridgeControllerId = "TestFridge";
var tempController = new TempController(sensorControllerId, sensorAddress, fridgeControllerId);


//show network interfaces
Object.keys(ifaces).forEach(function (ifname) {
  var alias = 0;

  ifaces[ifname].forEach(function (iface) {
    if ('IPv4' !== iface.family || iface.internal !== false) {
      // skip over internal (i.e. 127.0.0.1) and non-ipv4 addresses
      return;
    } 
    if (alias >= 1) {
      // this single interface has multiple ipv4 addresses
      console.log(ifname + ':' + alias, iface.address);
    } else {
      // this interface has only one ipv4 adress
	  serverName = iface.address;
      console.log(ifname, iface.address);
    }
    ++alias;
  });
});

function onRequest(request, response)
{
	//GET Request Received
	if(request.method == GET)
	{
		if(request.url == '/testServer')
		{
			var data = {};
			data.serverState = "Running";
			console.log("Received AutoFerment Core Server Test, response: Running");
			response.writeHead(200, {"Content-Type" : "application/json" });
			response.end(JSON.stringify(data), "\n");
		}
		else if(request.method == 'GET' && request.url == '/jqueryJs')
		{
			response.writeHead(200, {"Context-Type": "text/js"});
			fs.createReadStream("../javascript/jquery/jquery-2.2.1.js").pipe(response);
		}
		else if(request.method == 'GET' && request.url == '/bootstrapJs')
		{
			response.writeHead(200, {"Context-Type": "text/js"});
			fs.createReadStream("../bootstrap/js/bootstrap.min.js").pipe(response);
		}
		else if(request.method == 'GET' && request.url == '/bootstrapCss')
		{
			response.writeHead(200, {"Context-Type": "text/css"});
			fs.createReadStream("../bootstrap/css/bootstrap.min.css").pipe(response);
		}
		else if(request.method == 'GET' && request.url == '/testGUI')
		{
			response.writeHead(200, {"Context-Type": "text/js"});
			fs.createReadStream("../javascript/testGUI.js").pipe(response);
		}
		else if(request.method == 'GET' && request.url == '/AutoFermentGUI')
		{
			response.writeHead(200, {"Context-Type": "text/html"});
			fs.createReadStream("../html/index.html").pipe(response);
		}
		else
		{
			send404Response(response);
		}
	}
	//POST Request Rececived
	else if(request.method == POST)
	{
		var success = false;
		if(request.url == '/load')
		{
			var dataString = '';
			var returnObj = {};
			request.on('data', function (data)
			{
				dataString += data;
				console.log("server revceived : " +  dataString);
				
			});
			request.on('end', function ()
			{
				tempController.load(dataString);
			});
			response.writeHead(200, {"Content-Type" : "application/json" });
			response.end(JSON.stringify(returnObj), "\n");
		}
		else if(request.url == '/run')
		{
			
			request.on('end', function ()
			{
				tempController.run();
			});
			response.writeHead(200, {"Content-Type" : "application/json" });
			response.end(JSON.stringify(success), "\n");
		}
		else if(request.url == '/stop')
		{
			request.on('end', function ()
			{
				tempController.stop();
			});
			response.writeHead(200, {"Content-Type" : "application/json" });
			response.end(JSON.stringify(success), "\n");
		}
		else if(request.url == '/pause')
		{
			request.on('end', function ()
			{
				tempController.pause();
			});
			response.writeHead(200, {"Content-Type" : "application/json" });
			response.end(JSON.stringify(success), "\n");
		}
		else
		{
			send404Response(response);
		}
	}
	else
	{
		send404Response(response);
	}
}

http.createServer(onRequest).listen(portNum, serverName);

console.log("AutoFerment Core Server portnumber: " + portNum + " servername:" + serverName);

function send404Response(response)
{
	response.writeHead(404, {"Context-Type": "text/plain"});
	response.write("Error 404: Page not found!");
	response.end();
}








