var fs = require('fs');
var et = require("elementtree");
var heartBeatInerval;
var stepTimeouts = [];
var elapsedTimer;
var stepTimeElapsed = 0;
var simulation = true;
var SensorController = require('./SensorController');
var FridgeController = require('./FridgeController');

var dayInMillis = 86400000;
var hourToMillis = 3600000;
var minuteToMillis = 60000;

var startTime;
//Temperature Controller Object
var state = {
	OFF : 0,
	RUNNING : 1,
	PAUSED : 2,
	STOPPED : 3,
	LOADED : 4,
	NOT_LOADED : 5,
	FRIDGE_ON : 6,
	FRIDGE_OFF : 7
};


function Step(temp, days, hours, minutes) 
{
	this.temp = temp;
	this.milliseconds = (dayInMillis * days) + (hourToMillis * hours) + (minuteToMillis * minutes);
}

function TempController(sensorControllerId, sensorAddress, fridgeControllerId) 
{
	this.sensorController = new SensorController (sensorControllerId, sensorAddress, simulation);
	this.fridgeController = new FridgeController (fridgeControllerId);
	this.schedule = [];
	this.state = {};
	this.state.mode = state.OFF;
	this.state.loadState = state.NOT_LOADED;
	this.state.fridgeState = state.FRIDGE_OFF;
	this.status = {};
	this.status.sensorReadingTemps = [];
	this.status.sensorReadingDates = [];
	this.status.controlTemps = [];
	this.status.fridgeStates = [];
}

TempController.prototype.load = function(scheduleFilePath) 
{
	if(this.state.mode == state.OFF || this.state.mode == state.STOPPED)
	{
		//does this file exist
		try {
			fs.accessSync(scheduleFilePath, fs.R_OK);
	
			var schedule = {};
			
			//read schedule from xml
			var stats = fs.lstatSync("c:/AutoFerment/sandbox/data/schedules/beerSchedule.xml");
			
			if(stats.isFile())
			{
				if(this.state.loadState == state.LOADED)
				{
					console.log("previous schedule was already loaded");
					console.log("delete and reload.");
					delete this.schedule;
				}
				
				var schedule = {};			
				var data, etree;
	 
				data = fs.readFileSync('c:/AutoFerment/sandbox/data/schedules/beerSchedule.xml').toString();
				etree = et.parse(data);
				var schedule = etree.getroot();
				var scheduleArray = [];
				
				//schedule data
				var scheduleTitle = schedule.get('title');			
				var stageCount = parseInt(schedule.get('stageCount'));
				console.log(scheduleTitle + " loaded");			
				var stages = schedule.findall('stage');
				
				for(var stage = 0; stage < stageCount; stage++)
				{
					var stepCount = parseInt(stages[stage].get('stepCount'));				
					var steps = stages[stage].findall('step');
					for(var step = 0; step < stepCount; step++)
					{					
						var temp = steps[step].get('temp');
						var days = steps[step].get('days');
						var hours = steps[step].get('hours');
						var minutes = steps[step].get('minutes');
						
						var stepObj = new Step(temp, days, hours, minutes);
						scheduleArray.push(stepObj);
					}
				}
			}
			
			this.schedule = scheduleArray;
			this.state.loadState = state.LOADED;
			return true;
			
		} catch (e) {
			console.log("file not accessable /n" + e);
			return false;
		}
		
	}
	else
	{
		console.log("operation must be stopped");
		return false;
	}
};

TempController.prototype.run = function() 
{	
	if(this.state.loadState == state.LOADED && this.state.mode != state.RUNNING)
	{
		console.log(this.sensorController);
		console.log(this.fridgeController);
		
		var t = this;
		var sum = 0;
		
		//timers for when each step is complete.
		elapsedTimer = setInterval(function(){ t.incElapsedTIme(); }, 1000);
		for(var i = 0; i < this.schedule.length - 1; i ++)
		{
			console.log("STEP TIMER = tmp : " + this.schedule[i].temp + ", millis : " + this.schedule[i].milliseconds);
			sum = sum + this.schedule[i].milliseconds;
			stepTimeouts.push(setTimeout(function(){ t.shiftSteps(); }, sum));
		}
		console.log("STEP TIMER = tmp : " + this.schedule[this.schedule.length - 1].temp + ", millis : " + this.schedule[this.schedule.length - 1].milliseconds);
		sum = sum + this.schedule[this.schedule.length - 1].milliseconds;
		stepTimeouts.push(setTimeout(function(){ t.scheuleFinished(); }, sum));
		
		//heartbeat timer for temp control
		heartBeatInerval = setInterval(function(){ t.heartBeat(); }, 2000);	
		
		this.state.mode = state.RUNNING;
		return true;
	}
	else
	{
		console.log("Run Failed, loadState = " + this.state.loadState);
		return false;
	}
};


TempController.prototype.incElapsedTIme = function()
{
	stepTimeElapsed++;
}

TempController.prototype.shiftSteps = function()
{
	this.schedule.shift();
	stepTimeElapsed = 0;
}

TempController.prototype.scheuleFinished = function()
{
	console.log("Schedule has finished!!!!!");
	this.stop();
}

TempController.prototype.pause = function() 
{	
	if(this.state.mode == state.RUNNING)
	{
		console.log("pause");
		clearInterval(heartBeatInerval);
		clearInterval(elapsedTimer);

		//clear all step timers	
		for(var i = 0; i < stepTimeouts.length; i ++)
		{
			clearTimeout(stepTimeouts[i]);
		}

		this.state.mode = state.PAUSED;
		
		//clear timer array
		while(stepTimeouts.length > 0)
		{
			stepTimeouts.pop();
		}
		
		console.log("elapsed time = " + stepTimeElapsed);
		//console.log(this.schedule[0]);
		remaining = this.schedule[0].milliseconds - (stepTimeElapsed * 1000);
		this.schedule[0].milliseconds = remaining;
		//console.log(this.schedule[0]);
		stepTimeElapsed = 0;
		return true;
	}
	else
	{
		console.log("Pause Failed, this.state.mode = " + this.state.mode);
		return false;
	}
};

TempController.prototype.stop = function() 
{
	if(this.state.mode == state.RUNNING || this.state.mode == state.PAUSED)
	{
		this.pause();
		this.clear();
		
		this.state.mode = state.STOPPED;
		console.log("stopped");
		return true;
	}
	else
	{
		console.log("Stop Failed, this.state.mode = " + this.state.mode);
		return false;
	}
};

TempController.prototype.clear = function() 
{
	console.log("clear");
	
	//clear timer array
	while(stepTimeouts.length > 0)
	{
		stepTimeouts.pop();
		console.log("popped timer!!");
	}
	
	delete this.schedule;
	this.state.mode = state.OFF;
	this.state.loadState = state.NOT_LOADED;
};

TempController.prototype.heartBeat = function() 
{
	var tempReading = this.sensorController.readTemp(this.fridgeController.state);	
	var controlTemp = this.getControlTemp();
	
	if( tempReading >= controlTemp)
		this.fridgeController.changeState(state.FRIDGE_ON);
	else
		this.fridgeController.changeState(state.FRIDGE_OFF);
	
	var strState = "";
	
	if(this.fridgeController.state == state.FRIDGE_ON)
		strState = "ON";
	else
		strState = "OFF";
	
	console.log("control:" + controlTemp + ", " + "sensor:" + tempReading + ", " + strState);
	
	
	this.status.sensorReadingTemps.push(tempReading);
	this.status.sensorReadingDates.push(new Date());
	this.status.controlTemps.push(controlTemp);
	this.status.fridgeStates.push(strState);
};

TempController.prototype.getControlTemp = function() 
{
	return this.schedule[0].temp;
}

TempController.prototype.getStatus = function()
{
	return this.status;
}
TempController.prototype.getTempStatus = function()
{
	var data = {};
	data.sensorTemp = this.status.sensorReadingTemps[this.status.sensorReadingTemps.length - 1];
	data.controlTemp = this.status.controlTemps[this.status.controlTemps.length - 1];
	return data;
}


module.exports = TempController;